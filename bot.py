import asyncio
import os
import random
import logging
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.utils import executor
from telethon import TelegramClient

# === –£–∫–∞–∂–∏—Ç–µ —Å–≤–æ–∏ API_ID, API_HASH –∏ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ ===
API_ID = 20199491  # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π API ID
API_HASH = "fc95dbb20a664b9659dee52b65d124b1"  # –í—Å—Ç–∞–≤—å—Ç–µ —Å–≤–æ–π API HASH
BOT_TOKEN = "7269288490:AAGlD9a2U_Ii9UsUR2AfjhTYviWFDeNrHvA"  # –í—Å—Ç–∞–≤—å—Ç–µ —Ç–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
SESSION_FILE = "session"

# –ü–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞
PROJECT_DIR = "F:\TgBot"
USERNAMES_FILE = os.path.join(PROJECT_DIR, "usernames.txt")
MESSAGE_TEXT = "–ü—Ä–∏–≤–µ—Ç, —Ç—ã –∑–∞–ª–∏–≤–∞–µ—à—å —Ç—Ä–∞—Ñ–∏–∫? –ï—Å–ª–∏ –¥–∞, —Ç–æ –∫–∞–∫–∏–µ –æ–±—ä–µ–º—ã –∏ –æ—Ç–∫—É–¥–∞?))"

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–æ—Ç–∞
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(bot)
logging.basicConfig(level=logging.INFO)

def load_usernames():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —é–∑–µ—Ä–Ω–µ–π–º–æ–≤ –∏–∑ —Ñ–∞–π–ª–∞"""
    if not os.path.exists(USERNAMES_FILE):
        return []
    with open(USERNAMES_FILE, 'r', encoding='utf-8') as file:
        return [line.strip() for line in file if line.strip()]

async def collect_users(client, chat_link):
    """–°–±–æ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ —á–∞—Ç–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ —Ñ–∞–π–ª"""
    try:
        chat = await client.get_entity(chat_link)
    except Exception as e:
        return f"‚ùå –û—à–∏–±–∫–∞: {e}", []
    
    active_users = set()
    try:
        async for user in client.iter_participants(chat):
            if user.username:
                active_users.add(user.username)
    except Exception:
        async for message in client.iter_messages(chat, limit=1000):
            if message.sender_id:
                try:
                    user = await client.get_entity(message.sender_id)
                    if user.username:
                        active_users.add(user.username)
                except:
                    pass
    
    os.makedirs(PROJECT_DIR, exist_ok=True)
    with open(USERNAMES_FILE, "w", encoding="utf-8") as file:
        for username in sorted(active_users):
            file.write(f"@{username}\n")
    
    return f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(active_users)} –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!", list(active_users)

async def send_messages(client):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
    usernames = load_usernames()
    count = 0
    for username in usernames:
        try:
            user = await client.get_entity(username)
            await client.send_message(user, MESSAGE_TEXT)
            count += 1
            await asyncio.sleep(random.randint(1, 30))
        except Exception:
            pass
    return f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {count} —Å–æ–æ–±—â–µ–Ω–∏–π."

@dp.message_handler(commands=['start'])
async def start_cmd(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    keyboard = InlineKeyboardMarkup().add(
        InlineKeyboardButton("üìå –°–æ–±—Ä–∞—Ç—å —é–∑–µ—Ä–Ω–µ–π–º—ã", callback_data="collect"),
        InlineKeyboardButton("üìÑ –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫", callback_data="list"),
        InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É", callback_data="send")
    )
    await message.answer("üîπ –¢–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ –∏ —Ä–∞—Å—Å—ã–ª–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π üîπ", reply_markup=keyboard)

@dp.callback_query_handler(lambda c: c.data == 'collect')
async def collect_callback(callback_query: types.CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ —Å–±–æ—Ä–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"""
    await bot.send_message(callback_query.from_user.id, "–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —á–∞—Ç:")
    chat_link = await bot.wait_for("message")
    
    async with TelegramClient(os.path.join(PROJECT_DIR, SESSION_FILE), API_ID, API_HASH) as client:
        result, _ = await collect_users(client, chat_link.text.strip())
    
    await bot.send_message(callback_query.from_user.id, result)

@dp.callback_query_handler(lambda c: c.data == 'list')
async def list_callback(callback_query: types.CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å–ø–∏—Å–∫–∞"""
    usernames = load_usernames()
    if not usernames:
        await bot.send_message(callback_query.from_user.id, "–°–ø–∏—Å–æ–∫ –ø—É—Å—Ç.")
    else:
        await bot.send_message(callback_query.from_user.id, "\n".join(usernames[:50]))

@dp.callback_query_handler(lambda c: c.data == 'send')
async def send_callback(callback_query: types.CallbackQuery):
    """–ö–Ω–æ–ø–∫–∞ –Ω–∞—á–∞–ª–∞ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    async with TelegramClient(os.path.join(PROJECT_DIR, SESSION_FILE), API_ID, API_HASH) as client:
        result = await send_messages(client)
    await bot.send_message(callback_query.from_user.id, result)

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
